# using https://github.com/biocypher/project-template/blob/main/template_package/adapters/example_adapter.py as blueprint

import string
from enum import Enum, auto
from itertools import chain
from biocypher._logger import logger

logger.debug(f"Loading module {__name__}.")

class Adapter:
    """
    Example BioCypher adapter. Generates nodes and edges for creating a
    knowledge graph.

    Args:
        node_types: List of node types to include in the result.
        node_fields: List of node fields to include in the result.
        edge_types: List of edge types to include in the result.
        edge_fields: List of edge fields to include in the result.
    """

    def __init__(self,
        node_types: str = None,
        node_fields: str = None,
        edge_types: str = None,
        edge_fields: str = None
        ):
        self._set_types_and_fields(
            node_types, node_fields, edge_types, edge_fields
        )

    def _set_types_and_fields(self, node_types, node_fields, edge_types, edge_fields):
        self.node_types = node_types
        self.node_fields = node_fields
        self.edge_types = edge_types
        self.edge_fields = edge_fields

    def get_nodes(self):
        """
        Returns a generator of node tuples for node types specified in the
        adapter constructor.
        """

        logger.info("Generating nodes.")

        self.nodes = []
        for node in self.nodes:
            yield (node.get_id(), node.get_label(), node.get_properties())

    def get_edges(self, probability: float = 0.3):
        """
        Returns a generator of edge tuples for edge types specified in the
        adapter constructor.
        """

        logger.info("Generating edges.")

        if not self.nodes:
            raise ValueError("No nodes found. Please run get_nodes() first.")
        
        relationship_id = 'example_edge_id'
        node = Node()
        other_node = Node()
        edge_type = 'example_edge'
        yield (
            relationship_id,
            node.get_id(),
            other_node.get_id(),
            edge_type,
            {"example_proptery": "example_value"},
        )

    def get_node_count(self):
        """
        Returns the number of nodes generated by the adapter.
        """
        return len(self.get_nodes())

class Node:
    """
    Base class for nodes.
    """
    def __init__(self, id:str=None, label:str=None, properties:dict=dict()):
        self.id = id
        self.label = label
        self.properties = properties

    def get_id(self):
        """
        Returns the node id.
        """
        return self.id

    def get_label(self):
        """
        Returns the node label.
        """
        return self.label

    def get_properties(self):
        """
        Returns the node properties.
        """
        return self.properties

class Edge:
    """
    Base class for nodes.
    """
    def __init__(self, id:str=None, source:str=None, target:str=None, label:str=None, properties:dict=dict()):
        self.id = id
        self.source = source
        self.target = target
        self.label = label
        self.properties = properties

    def get_id(self):
        """
        Returns the edge id.
        """
        return self.id
    
    def get_source(self):
        """
        Returns the source node id.
        """
        return self.source
    
    def get_target(self):
        """
        Returns the target node id.
        """
        return self.target

    def get_label(self):
        """
        Returns the node label.
        """
        return self.label

    def get_properties(self):
        """
        Returns the node properties.
        """
        return self.properties